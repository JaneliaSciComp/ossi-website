---
import { getCollection } from "astro:content";
import { getEntries } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";
import Link from "../../components/Link.astro";
import QuickLinks from "../../components/projects/individual-project/QuickLinks.astro";
import ExternalLinks from "../../components/projects/individual-project/ExternalLinks.astro";
import Media from "../../components/projects/individual-project/Media.astro";

import {
  extractUniqueTagsObject,
  findLabInfo,
  generatePublicationLinks,
  getBackgroundColor,
} from "../../utils/tagManipulation";

import { getReadme } from "../../utils/githubApiHelper";

const { project } = Astro.props;
const frontmatter = project.data;
const body = project.body;
const { Content } = await project.render();
let readmeHtml = {};
// console.log(body.length, body.includes("provide an alternative description"));

if (body.length === 0 || body.includes("provide an alternative description")) {
  readmeHtml = await getReadme(frontmatter["github link"]);
}

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

const relatedBlogPosts = frontmatter["related blog posts"]
  ? await getEntries(frontmatter["related blog posts"])
  : null;

//Have to set data: frontmatter b/c the function expects an obj in the format {data: {key: value}}
//And frontmatter = data
const tagsObj = extractUniqueTagsObject({ data: frontmatter });
const labInfoArray = findLabInfo(frontmatter["development team"]);
const pubInfoArray = generatePublicationLinks(frontmatter);

const baseUrl = import.meta.env.BASE_URL;
---

<BaseLayout>
  <div class="pt-24 pb-8 max-w-7xl mx-auto">
    <a
      class="self-start mx-6 border-b-2 text-sm transition ease-in duration-200 hover:bg-gray-100 hover:border-gray-600 dark:text-slate-300 dark:border-slate-500 dark:hover:bg-slate-800 dark:hover:border-slate-800 cursor-pointer"
      href={`${baseUrl}/projects`}
    >
      Projects
    </a>
    <div class="flex flex-col lg:grid grid-cols-6">
      <section class="row-start-1 row-span-1 col-span-4 pt-6 pb-8">
        <h1
          class="mx-6 text-4xl md:text-5xl font-bold leading-tighter tracking-tighter font-heading"
        >
          {frontmatter.title}
        </h1>
        <p
          class="mx-6 mt-6 md:mt-10 text-xl md:text-2xl text-muted dark:text-slate-400"
        >
          {frontmatter.tagline}
        </p>
      </section>

      <QuickLinks frontmatter={frontmatter} />

      <div class="col-start-1 col-span-4">
        <Media frontmatter={frontmatter} />

        <div class="mx-6 my-6 flex flex-col gap-1">
          {
            labInfoArray && (
              <div class="flex flex-wrap mb-2 gap-3">
                <p class="font-semibold">Development Team:</p>
                {labInfoArray.map((labInfo) => {
                  if (labInfo) {
                    const { name, url } = labInfo;
                    return <Link text={name} url={url} />;
                  }
                })}
              </div>
            )
          }
          {
            frontmatter["open source license"] && (
              <div class="flex flex-wrap mb-2 gap-3">
                <p class="font-semibold">License:</p>
                {frontmatter["open source license"]}
              </div>
            )
          }

          {
            relatedBlogPosts && (
              <div class="flex flex-wrap mb-2 gap-3">
                <p class="font-semibold">Related blog posts:</p>
                {relatedBlogPosts.map((blog) => (
                  <Link
                    text={blog?.data?.title}
                    url={`${baseUrl}/blog/${blog?.slug}`}
                  />
                ))}
              </div>
            )
          }

          <ExternalLinks frontmatter={frontmatter} />

          <div class="pt-6 flex flex-wrap gap-2">
            {
              Object.entries(tagsObj).map(([key, tags]) => {
                return tags.map((tag) => {
                  return (
                    <span
                      class="bg-primary text-white px-2 py-1 rounded-md text-sm"
                      style={{ backgroundColor: getBackgroundColor(key) }}
                    >
                      {tag}
                    </span>
                  );
                });
              })
            }
          </div>
        </div>

        <section
          class="col-span-4 row-start-3 ml-6 prose prose-lg lg:prose-xl dark:prose-invert dark:prose-headings:text-slate-300 prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-primary dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg"
        >
          <div class="my-6 md:mt-10">
            <div class="border-t dark:border-slate-700"></div>
          </div>

          <!-- This is where any custom description of the project gets rendered -->
          {
            body.length === 0 ||
            body.includes("provide an alternative description") ? (
              <div set:html={readmeHtml} />
            ) : (
              <Content />
            )
          }
          <!-- If no custom description in the Markdown file, the project's GitHub README file is used-->
        </section>
      </div>
    </div>
  </div>
</BaseLayout>
