---
import { getCollection, getEntries, render } from "astro:content";

import BaseLayout from "@layouts/BaseLayout.astro";
import QuickLinks from "@components/individual-project/QuickLinks.astro";
import Youtube from "@components/individual-project/Youtube.astro";
import DevelopmentTeam from "@components/individual-project/DevelopmentTeam.astro";
import ProjectPageTabs from "@components/individual-project/Tabs";
import License from "@components/individual-project/License.astro";
import ExternalLinks from "@components/individual-project/ExternalLinks.astro";
import Tag from "@components/projects/Tag.astro";
import Readme from "@components/individual-project/Readme";

import { getTagKeysAndValues } from "@utils/getTags";
import { findLabInfo } from "@utils/getLabUrl";
import RelatedPosts from "@components/individual-project/RelatedPosts.astro";

// Implementation of Astro getStaticPaths() function, required for dynamic routes
// Defines all paths at build time, in this case, for individual projects in the "projects" content collection
export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((project) => ({
    params: { id: project.id },
    props: { project },
  }));
}

const { project } = Astro.props;
const frontmatter = project.data;
const body = project.body;
const { Content } = await render(project);

const relatedBlogPosts = frontmatter["related blog posts"]
  ? await getEntries(frontmatter["related blog posts"])
  : null;

//Have to set data: frontmatter b/c the function expects an obj in the format {data: {key: value}}
//And frontmatter = data
const tagsObj = getTagKeysAndValues({ data: frontmatter });
const labInfoArray = findLabInfo(frontmatter["development team"]);
---

<BaseLayout>
  <div
    class="grow lg:grid grid-cols-5 auto-rows-min pt-24 pb-8 max-w-7xl mx-auto"
  >
    <a
      class="col-start-1 row-start-1 mx-6 text-sm text-primary hover:underline dark:text-slate-300 dark:border-slate-500 dark:hover:border-slate-800 cursor-pointer"
      href={`/projects`}
    >
      Projects
    </a>
    <div class="col-start-1 col-span-3 row-start-2">
      <h1
        class="m-6 text-4xl md:text-5xl font-bold leading-tighter tracking-tighter font-heading"
      >
        {frontmatter.title}
      </h1>
      <p
        class="mx-6 mb-6 md:mt-10 text-xl md:text-2xl text-muted dark:text-slate-400"
      >
        {frontmatter.tagline}
      </p>
    </div>

    <div
      class="col-start-4 col-span-2 row-start-2 row-span-2 px-6 py-12 lg:p-0 lg:pl-12 bg-primary bg-opacity-20 lg:bg-page lg:bg-opacity-0"
    >
      <QuickLinks frontmatter={frontmatter} />
    </div>
    <div class="col-start-1 col-span-3 mx-6">
      <Youtube
        url={frontmatter["youtube url"]}
        title={frontmatter["youtube title"]}
        params={frontmatter["youtube params"]}
      />
      <ProjectPageTabs client:load>
        <div slot="overview">
          <DevelopmentTeam team={labInfoArray} />
          <License license={frontmatter["open source license"]} />
          <RelatedPosts posts={relatedBlogPosts} />
          <ExternalLinks frontmatter={frontmatter} />
          <div class="pt-6 flex flex-wrap gap-2">
            {
              Object.entries(tagsObj).map(([tagCat, tags]) => {
                return tags.map((tag) => {
                  return (
                    <Tag tagCat={tagCat} tag={tag} contentType="projects" />
                  );
                });
              })
            }
          </div>
        </div>

        {
          body === undefined ||
          body.includes("provide an alternative description") ? (
            <Readme
              githubLink={frontmatter["github link"]}
              slot="readme"
              client:load
            />
          ) : (
            <Content slot="content" />
          )
        }
      </ProjectPageTabs>
    </div>
  </div>
</BaseLayout>
